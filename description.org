* Export options
#+TITLE: description.org
#+AUTHOR: Luis A. Gutierrez Soto 
#+EMAIL: gsoto.angel@gmail.com
#+DATE: 23/09/2010

* Looking for PNe in JPLUS DR2

I used this query to get Halpha emitters: 


- Descartado 

#+BEGIN_SRC query : lines
SELECT * FROM jplus.MagABDualObj WHERE MAG_ERR_AUTO[jplus::rSDSS] <= 0.2 AND MAG_ERR_AUTO[jplus::J0660] <= 0.2 AND MAG_ERR_AUTO[jplus::iSDSS] <= 0.2 AND MAG_AUTO[jplus::rSDSS] < 20.0 AND MAG_AUTO[jplus::rSDSS] - MAG_AUTO[jplus::J0660] >= 0.22*(MAG_AUTO[jplus::rSDSS] - MAG_AUTO[jplus::iSDSS]) + 0.55
#+END_SRC

- Mejorando el criterio (visualamente) para seleccionar los Halpha emitters. Encontré este criterio de color: y =  0.25*x_new + 0.5

#+BEGIN_SRC query : lines
SELECT * FROM jplus.MagABDualObj WHERE MAG_ERR_AUTO[jplus::rSDSS] <= 0.2 AND MAG_ERR_AUTO[jplus::J0660] <= 0.2 AND MAG_ERR_AUTO[jplus::iSDSS] <= 0.2 AND MAG_AUTO[jplus::rSDSS] < 20.0 AND MAG_AUTO[jplus::rSDSS] - MAG_AUTO[jplus::J0660] >= 0.25*(MAG_AUTO[jplus::rSDSS] - MAG_AUTO[jplus::iSDSS]) + 0.5
#+END_SRC

With the above SQL comand I got the file: =####.csv= lo convierto en =Halpha_emitters_threeerror.fits= or ~.dat~ usando ~Topcat~ (actually deve ser .dat). Only error en las filtros r, J0660 e i, y com r < 20. y desde luego un criterio que propongo para solo descragar Ha emitter usando el diagrama color de Viironen. Quizas debera usar otro de los criterios de color que propuse.


Aplicando el query  obtuve 30,683 fuentes


- Luego escribí un programa: =varios-programs/JPLUS_DR2_HaphaVii_table.py= para convertir el archivo =.dat= en =.tab= y manejar mejor los datos, hice esto porque en el archivo que se desacarga del sitio de J-PLUS usando =ADQL=, tiene la particulidad de que todos los filtros de cada avertura (auto, petro, etc) estan en una misma columna, entonces con este progroma coloco cada filtro en una determinada columna para cada apertura.

- Escribí otro programa para limpiar esta muestra, es decir aplicar FlAGS, Mask_FLAGS, y error, el programa es "JPLUS_DR2_HaphaVii_cleaning_sample.py Halpha_emitters_threeerror".

a. Primero apliqué donde cada filtro ~!= 99~, los flags y ~(tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) <= 2.5 (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) >= -2.5 (tab['rSDSS_'+magg] - tab['J0660_'+magg]) <= 2.5~ esto deacuerdo con el diagrama color de viironen y mis magnitudes sintécticas. Obtuve el archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab" 


- Aplicando para esta primera muestra obtuve 10,034 fuentes.

 Apliqué pca y obtuve 178 objetos clasificados como PNe. Usando el program in jupyter "Covert from .tab to .dat" sólo escribí las coordenads de las fuentes e hice crossmatching con el catálogo de PNe usando topcat y encontré 8 matches. 

-  3247 como SySt


b. Apliqué donde cada filtro != 99,  los flags y ~(tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) <= 2.5 (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) >= -2.5 (tab['rSDSS_'+magg] - tab['J0660_'+magg]) <= 2.5~ esto deacuerdo con el diagrama color de viironen y mis magnitudes sintécticas. E adicional MASK_flags. Obtuve el archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask.tab" 

- Aplicando para esta muestra obtuve 3,912 fuentes.

 Apliqué pca y obtuve 73 objetos clasificados como PNe. Usando el program in jupyter "Covert from .tab to .dat" sólo escribí las coordenads de las fuentes e hice crossmatching con el catálogo de PNe usando topcat y encontré ?? matches. 

- 1958 como SySt.

c. Apliqué donde cada filtro != 99,  los flags y (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) <= 2.5 (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) >= -2.5 (tab['rSDSS_'+magg] - tab['J0660_'+magg]) <= 2.5 esto deacuerdo con el diagrama color de viironen y mis magnitudes sintécticas. E adicional MASK_flags. Apliqué en los errores en los filtros anchos. Obtuve el archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad.tab"-- Ojo broad quiere decir que apliqué en los errores de los filtros anchos.  

- Aplicando para esta muestra obtuve 463 fuentes.
 Apliqué pca y obtuve 28 objetos clasificados como PNe. Usando el program in jupyter "Covert from .tab to .dat" sólo escribí las coordenads de las fuentes e hice crossmatching con el catálogo de PNe usando topcat é encontré ?? matches. 

- (123 con sanduleak) 119 como SySt

+ Me di cuenta que no es necesario limpiar y despues correr las técnicas estadísticas. La idea es correr los algoritmos usando el archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab" y después limpiar.


** LDA ==>>


+ Modifiqué el programa  para que funcione con J-PLUS IDR2 (lda-jplusdr2_3class_predict.py).

a.  Apliqué directatamnete al archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab"

Fueron clasificadas 1706 objetsos como PNe (que loco son muchos). Y 4827 como SySt.

Después de hacer cross-matching con el catálogo de PNe encontre ocho matches, quiere decir que recuperé todas las nebulosas observadas en el área (eso es una cosa buena).

b. Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask.tab. 253 como PN. 1578 como SySt. Crosmtaching con HASH 7 coincidencias (excelente).


* TODO Aperture 6 Arc            
- Corrí el query:
#+BEGIN_SRC query :results 
SELECT * FROM jplus.MagABDualObj WHERE MAG_ERR_APER_6_0[jplus::rSDSS] <= 0.2 AND MAG_ERR_APER_6_0[jplus::J0660] <= 0.2 AND MAG_ERR_APER_6_0[jplus::iSDSS] <= 0.2 AND MAG_APER_6_0[jplus::rSDSS] < 20.0 AND MAG_APER_6_0[jplus::rSDSS] - MAG_APER_6_0[jplus::J0660] >= 0.25*(MAG_APER_6_0[jplus::rSDSS] - MAG_APER_6_0[jplus::iSDSS]) + 0.5
#+END_SRC
-- I obtained the file: 71906.csv.

- =Topcat: Halpha_emitters_threeerror.dat=

+ Aplicando the query obtuve 22,559 fuentes
-
- varios-programs/JPLUS_DR2_HaphaVii_table.py para crear el archivo Halpha_emitters_threeerror.tab

- Primero apliqué donde cada filtro != 99,  los flags y (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) <= 2.5 (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) >= -2.5 (tab['rSDSS_'+magg] - tab['J0660_'+magg]) <= 2.5 esto deacuerdo con el diagrama color de viironen y mis magnitudes sintécticas. Obtuve el archivo "Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab"

-- Obtuve 4,551 fuentes

-- Apliqué PCA: =PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab= => 194. SySt => 1822

-- Match HASH 7 objects (good)

-- Escribí un programa para limpiar las muestras depués de aplicar PCA y LDA: "JPLUS_cleaning_table.py"

-- Mask and error broad-band => PNe = 75. SySt=130

- Apliqué LDA to =Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab=

-- PNe = 670. SySt=2290

-- Mask and error broad-band => PNe = 145. SySt=123


* TODO JPLUS DR2 final    


I made cross-marching between HASH and DR2 SPLUS. I used the url:

#+LINK: jplus https://archive.cefca.es/catalogues/vo/cone/jplus-dr2/JPLUS.CALIBRATEDMAGABDUALOBJ

I found 12 matches.

          
** 6Arcsec 

+ I ran the query and obtained the file: =72080.csv=.
+ ~Topcat: Halpha_emitters_threeerror.dat~
+ 24048 objectos.
+ Run the follows script to write the table in a more adequate file.  Para crear el archivo =Halpha_emitters_threeerror.tab= (intente ecsv, nuevo formato de archivo, parecen ser mejor que el punto .tab, cortesia del profe Will).

: python ../../varios-programs/JPLUS_DR2_HaphaVii_table.py Halpha_emitters_threeerror --savefile --debug

#+BEGIN_SRC python : change the format of output file from JPLUS
from astropy.io import fits
import os
import glob
import json
import argparse
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table
from astropy.io import ascii
import sys
import numpy as np

#create list with the magnitudes
n = 77
magnitude = [[] for _ in range(n)]

parser = argparse.ArgumentParser(
    description="""Write the file""")

parser.add_argument("source", type=str,
                    default="table-6mil-obj-jplus",
                    help="Name of source, taken the prefix ")

parser.add_argument("--savefile", action="store_true",
                    help="Save ascii file showing the magnitude")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
file_ = args.source + ".dat"

def mag(type_mag):
    dta = tab[type_mag]
    dta = pd.Series(dta)
    dta_exp = dta.str.split(' ', expand=True)
    return dta_exp

#Read files
tab = ascii.read(file_)

Tile = tab["TILE_ID"]
Number = tab["NUMBER"]
RA = tab["ALPHA_J2000"]
DEC = tab["DELTA_J2000"]
r_auto = mag("MAG_AUTO")[0]
g_auto = mag("MAG_AUTO")[1]
i_auto = mag("MAG_AUTO")[2]
z_auto = mag("MAG_AUTO")[3]
uJAVA_auto = mag("MAG_AUTO")[4]
J0378_auto = mag("MAG_AUTO")[5]
J0395_auto = mag("MAG_AUTO")[6]
J0410_auto = mag("MAG_AUTO")[7]
J0430_auto = mag("MAG_AUTO")[8]
J0515_auto = mag("MAG_AUTO")[9]
J0660_auto = mag("MAG_AUTO")[10]
J0861_auto = mag("MAG_AUTO")[11]

r_MAG_PETRO = mag("MAG_PETRO")[0]
g_MAG_PETRO = mag("MAG_PETRO")[1]
i_MAG_PETRO = mag("MAG_PETRO")[2]
z_MAG_PETRO = mag("MAG_PETRO")[3]
uJAVA_MAG_PETRO = mag("MAG_PETRO")[4]
J0378_MAG_PETRO = mag("MAG_PETRO")[5]
J0395_MAG_PETRO = mag("MAG_PETRO")[6]
J0410_MAG_PETRO = mag("MAG_PETRO")[7]
J0430_MAG_PETRO = mag("MAG_PETRO")[8]
J0515_MAG_PETRO = mag("MAG_PETRO")[9]
J0660_MAG_PETRO = mag("MAG_PETRO")[10]
J0861_MAG_PETRO = mag("MAG_PETRO")[11]

r_MAG_APER_6_0 = mag("MAG_APER_6_0")[0]
g_MAG_APER_6_0 = mag("MAG_APER_6_0")[1]
i_MAG_APER_6_0 = mag("MAG_APER_6_0")[2]
z_MAG_APER_6_0 = mag("MAG_APER_6_0")[3]
uJAVA_MAG_APER_6_0 = mag("MAG_APER_6_0")[4]
J0378_MAG_APER_6_0 = mag("MAG_APER_6_0")[5]
J0395_MAG_APER_6_0 = mag("MAG_APER_6_0")[6]
J0410_MAG_APER_6_0 = mag("MAG_APER_6_0")[7]
J0430_MAG_APER_6_0 = mag("MAG_APER_6_0")[8]
J0515_MAG_APER_6_0 = mag("MAG_APER_6_0")[9]
J0660_MAG_APER_6_0 = mag("MAG_APER_6_0")[10]
J0861_MAG_APER_6_0 = mag("MAG_APER_6_0")[11]

#ERROR
r_auto_err = mag("MAG_ERR_AUTO")[0]
g_auto_err = mag("MAG_ERR_AUTO")[1]
i_auto_err = mag("MAG_ERR_AUTO")[2]
z_auto_err = mag("MAG_ERR_AUTO")[3]
uJAVA_auto_err = mag("MAG_ERR_AUTO")[4]
J0378_auto_err = mag("MAG_ERR_AUTO")[5]
J0395_auto_err = mag("MAG_ERR_AUTO")[6]
J0410_auto_err = mag("MAG_ERR_AUTO")[7]
J0430_auto_err = mag("MAG_ERR_AUTO")[8]
J0515_auto_err = mag("MAG_ERR_AUTO")[9]
J0660_auto_err = mag("MAG_ERR_AUTO")[10]
J0861_auto_err = mag("MAG_ERR_AUTO")[11]

r_MAG_PETRO_ERR  = mag("MAG_ERR_PETRO")[0]
g_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[1]
i_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[2]
z_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[3]
# try:
#     uJAVA_MAG_PETRO_ERR = mag("MAG_ERR_ISO_GAUS")[4]
# except KeyError:
#     None
uJAVA_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[4]
J0378_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[5]
J0395_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[6]
J0410_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[7]
J0430_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[8]
J0515_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[9]
J0660_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[10]
J0861_MAG_PETRO_ERR = mag("MAG_ERR_PETRO")[11]

r_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[0]
g_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[1]
i_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[2]
z_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[3]
uJAVA_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[4]
J0378_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[5]
J0395_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[6]
J0410_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[7]
J0430_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[8]
J0515_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[9]
J0660_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[10]
J0861_MAG_APER_6_0_err = mag("MAG_ERR_APER_6_0")[11]

#FLAGS
r_FLAGS = mag("FLAGS")[0]
g_FLAGS = mag("FLAGS")[1]
i_FLAGS = mag("FLAGS")[2]
z_FLAGS = mag("FLAGS")[3]
uJAVA_FLAGS = mag("FLAGS")[4]
J0378_FLAGS = mag("FLAGS")[5]
J0395_FLAGS = mag("FLAGS")[6]
J0410_FLAGS = mag("FLAGS")[7]
J0430_FLAGS = mag("FLAGS")[8]
J0515_FLAGS = mag("FLAGS")[9]
J0660_FLAGS = mag("FLAGS")[10]
J0861_FLAGS = mag("FLAGS")[11]

#MASK
r_MASK_FLAGS = mag("MASK_FLAGS")[0]
g_MASK_FLAGS = mag("MASK_FLAGS")[1]
i_MASK_FLAGS = mag("MASK_FLAGS")[2]
z_MASK_FLAGS = mag("MASK_FLAGS")[3]
uJAVA_MASK_FLAGS = mag("MASK_FLAGS")[4]
J0378_MASK_FLAGS = mag("MASK_FLAGS")[5]
J0395_MASK_FLAGS = mag("MASK_FLAGS")[6]
J0410_MASK_FLAGS = mag("MASK_FLAGS")[7]
J0430_MASK_FLAGS = mag("MASK_FLAGS")[8]
J0515_MASK_FLAGS = mag("MASK_FLAGS")[9]
J0660_MASK_FLAGS = mag("MASK_FLAGS")[10]
J0861_MASK_FLAGS = mag("MASK_FLAGS")[11]

#Creating table
table = Table([Tile, Number, RA, DEC, r_auto, g_auto, i_auto, z_auto, uJAVA_auto, J0378_auto, J0395_auto,  J0410_auto , J0430_auto, J0515_auto, J0660_auto, J0861_auto, r_MAG_PETRO, g_MAG_PETRO, i_MAG_PETRO, z_MAG_PETRO, uJAVA_MAG_PETRO, J0378_MAG_PETRO, J0395_MAG_PETRO,  J0410_MAG_PETRO , J0430_MAG_PETRO, J0515_MAG_PETRO, J0660_MAG_PETRO, J0861_MAG_PETRO, r_MAG_APER_6_0, g_MAG_APER_6_0, i_MAG_APER_6_0, z_MAG_APER_6_0, uJAVA_MAG_APER_6_0, J0378_MAG_APER_6_0, J0395_MAG_APER_6_0,  J0410_MAG_APER_6_0 , J0430_MAG_APER_6_0, J0515_MAG_APER_6_0, J0660_MAG_APER_6_0, J0861_MAG_APER_6_0, r_auto_err, g_auto_err, i_auto_err, z_auto_err, uJAVA_auto_err, J0378_auto_err, J0395_auto_err,  J0410_auto_err, J0430_auto_err, J0515_auto_err, J0660_auto_err, J0861_auto_err, r_MAG_PETRO_ERR, g_MAG_PETRO_ERR, i_MAG_PETRO_ERR, z_MAG_PETRO_ERR, uJAVA_MAG_PETRO_ERR, J0378_MAG_PETRO_ERR, J0395_MAG_PETRO_ERR, J0410_MAG_PETRO_ERR , J0430_MAG_PETRO_ERR, J0515_MAG_PETRO_ERR, J0660_MAG_PETRO_ERR, J0861_MAG_PETRO_ERR, r_MAG_APER_6_0_err, g_MAG_APER_6_0_err, i_MAG_APER_6_0_err, z_MAG_APER_6_0_err, uJAVA_MAG_APER_6_0_err, J0378_MAG_APER_6_0_err, J0395_MAG_APER_6_0_err,  J0410_MAG_APER_6_0_err , J0430_MAG_APER_6_0_err, J0515_MAG_APER_6_0_err, J0660_MAG_APER_6_0_err, J0861_MAG_APER_6_0_err, r_FLAGS, g_FLAGS, i_FLAGS, z_FLAGS, uJAVA_FLAGS, J0378_FLAGS, J0395_FLAGS, J0410_FLAGS, J0430_FLAGS, J0515_FLAGS, J0660_FLAGS, J0861_FLAGS, r_MASK_FLAGS, g_MASK_FLAGS, i_MASK_FLAGS, z_MASK_FLAGS, uJAVA_MASK_FLAGS, J0378_MASK_FLAGS, J0395_MASK_FLAGS, J0410_MASK_FLAGS, J0430_MASK_FLAGS, J0515_MASK_FLAGS, J0660_MASK_FLAGS, J0861_MASK_FLAGS], names=('Tile', 'Number', 'RA', 'Dec', 'rSDSS_auto', 'gSDSS_auto', 'iSDSS_auto', 'zSDSS_auto', 'uJAVA_auto', 'J0378_auto', 'J0395_auto', 'J0410_auto', 'J0430_auto', 'J0515_auto', 'J0660_auto', 'J0861_auto', 'rSDSS_PETRO', 'gSDSS_PETRO', 'iSDSS_PETRO', 'zSDSS_PETRO', 'uJAVA_PETRO', 'J0378_PETRO', 'J0395_PETRO', 'J0410_PETRO', 'J0430_PETRO', 'J0515_PETRO', 'J0660_PETRO', 'J0861_PETRO', 'rSDSS_MAG_APER_6_0', 'gSDSS_MAG_APER_6_0', 'iSDSS_MAG_APER_6_0', 'zSDSS_MAG_APER_6_0', 'uJAVA_MAG_APER_6_0', 'J0378_MAG_APER_6_0', 'J0395_MAG_APER_6_0', 'J0410_MAG_APER_6_0', 'J0430_MAG_APER_6_0', 'J0515_MAG_APER_6_0', 'J0660_MAG_APER_6_0', 'J0861_MAG_APER_6_0', 'rSDSS_auto_err', 'gSDSS_auto_err', 'iSDSS_auto_err', 'zSDSS_auto_err', 'uJAVA_auto_err', 'J0378_auto_err', 'J0395_auto_err', 'J0410_auto_err', 'J0430_auto_err', 'J0515_auto_err', 'J0660_auto_err', 'J0861_auto_err',  'rSDSS_PETRO_err', 'gSDSS_PETRO_err', 'iSDSS_PETRO_err', 'zSDSS_PETRO_err', 'uJAVA_PETRO_err', 'J0378_PETRO_err', 'J0395_PETRO_err', 'J0410_PETRO_err', 'J0430_PETRO_err', 'J0515_PETRO_err', 'J0660_PETRO_err', 'J0861_PETRO_err','rSDSS_MAG_APER_6_0_err', 'gSDSS_MAG_APER_6_0_err', 'iSDSS_MAG_APER_6_0_err', 'zSDSS_MAG_APER_6_0_err', 'uJAVA_MAG_APER_6_0_err', 'J0378_MAG_APER_6_0_err', 'J0395_MAG_APER_6_0_err', 'J0410_MAG_APER_6_0_err', 'J0430_MAG_APER_6_0_err', 'J0515_MAG_APER_6_0_err', 'J0660_MAG_APER_6_0_err', 'J0861_MAG_APER_6_0_err', 'rSDSS_FLAGS', 'gSDSS_FLAGS', 'iSDSS_FLAGS', 'zSDSS_FLAGS', 'uJAVA_FLAGS', 'J0378_FLAGS', 'J0395_FLAGS', 'J0410_FLAGS', 'J0430_FLAGS', 'J0515_FLAGS', 'J0660_FLAGS', 'J0861_FLAGS', 'rSDSS_MASK_FLAGS', 'gSDSS_MASK_FLAGS', 'iSDSS_MASK_FLAGS', 'zSDSS_MASK_FLAGS', 'uJAVA_MASK_FLAGS', 'J0378_MASK_FLAGS', 'J0395_MASK_FLAGS', 'J0410_MASK_FLAGS', 'J0430_MASK_FLAGS', 'J0515_MASK_FLAGS', 'J0660_MASK_FLAGS', 'J0861_MASK_FLAGS'), meta={'name': 'first table'})  

#Saving resultated table
if args.savefile:
    asciifile = file_.replace(".dat", ".tab")
    table.write(asciifile, format="ascii.tab")

#+END_SRC

#+RESULTS:
file:aper6_mag_idr/Halpha_emitters_threeerror.tab

+ For cleaning:

    With this script only it is limit the Viironen colors, not select mag with values 99. and it is apply 
    the Flags.

    : python ../../varios-programas/JPLUS_DR2_HaphaVii_cleaning_sample.py Halpha_emitters_threeerror 

#+BEGIN_SRC python : cleaning the sample
from astropy.io import fits
import os
import glob
import json
import argparse
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table
from astropy.io import ascii
import sys
import numpy as np

def select(magg):
    ef1 = tab['uJAVA_'+magg+'_err'] <= 0.2
    ef2 = tab['J0378_'+magg+'_err'] <= 0.2
    ef3 =  tab['J0395_'+magg+'_err'] <= 0.2
    ef4 =  tab['J0410_'+magg+'_err'] <= 0.2
    ef5 =  tab['J0430_'+magg+'_err'] <= 0.2
    ef6 =  tab['gSDSS_'+magg+'_err'] <= 0.2
    ef7 =  tab['J0515_'+magg+'_err'] <= 0.2
    ef8 =  tab['rSDSS_'+magg+'_err'] <= 0.2
    ef9 =  tab['J0660_'+magg+'_err'] <= 0.2
    ef10 =  tab['iSDSS_'+magg+'_err'] <= 0.2
    ef11 =  tab['J0861_'+magg+'_err'] <= 0.2
    ef12 =  tab['zSDSS_'+magg+'_err'] <= 0.2

    f1 = tab['uJAVA_'+magg] != 99.0
    f2 = tab['J0378_'+magg] != 99.0
    f3 =  tab['J0395_'+magg] != 99.0
    f4 =  tab['J0410_'+magg] != 99.0
    f5 =  tab['J0430_'+magg] != 99.0
    f6 =  tab['gSDSS_'+magg] != 99.0
    f7 =  tab['J0515_'+magg] != 99.0
    f8 =  tab['rSDSS_'+magg] != 99.0
    f9 =  tab['J0660_'+magg] != 99.0
    f10 =  tab['iSDSS_'+magg] != 99.0
    f11 =  tab['J0861_'+magg] != 99.0
    f12 =  tab['zSDSS_'+magg] != 99.0

    flag1 = tab['rSDSS_FLAGS'] <= 3.0
    flag2 = tab['gSDSS_FLAGS'] <= 3.0
    flag3 = tab['iSDSS_FLAGS'] <= 3.0
    flag4 = tab['zSDSS_FLAGS'] <= 3.0
    flag5 = tab['uJAVA_FLAGS'] <= 3.0
    flag6 = tab['J0378_FLAGS'] <= 3.0
    flag7 = tab['J0395_FLAGS'] <= 3.0
    flag8 = tab['J0410_FLAGS'] <= 3.0
    flag9 = tab['J0430_FLAGS'] <= 3.0
    flag10 = tab['J0515_FLAGS'] <= 3.0
    flag11 = tab['J0660_FLAGS'] <= 3.0
    flag12 = tab['J0861_FLAGS'] <= 3.0

    mask_flag1 = tab['rSDSS_MASK_FLAGS'] == 0.0
    mask_flag2 = tab['gSDSS_MASK_FLAGS'] == 0.0
    mask_flag3 = tab['iSDSS_MASK_FLAGS'] == 0.0
    mask_flag4 = tab['zSDSS_MASK_FLAGS'] == 0.0
    mask_flag5 = tab['uJAVA_MASK_FLAGS'] == 0.0
    mask_flag6 = tab['J0378_MASK_FLAGS'] == 0.0
    mask_flag7 = tab['J0395_MASK_FLAGS'] == 0.0
    mask_flag8 = tab['J0410_MASK_FLAGS'] == 0.0
    mask_flag9 = tab['J0430_MASK_FLAGS'] == 0.0
    mask_flag10 = tab['J0515_MASK_FLAGS'] == 0.0
    mask_flag11 = tab['J0660_MASK_FLAGS'] == 0.0
    mask_flag12 = tab['J0861_MASK_FLAGS'] == 0.0

    #color
    col1 = (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) <= 3.0
    col2 = (tab['rSDSS_'+magg] - tab['iSDSS_'+magg]) >= -3.0
    col3 = (tab['rSDSS_'+magg] - tab['J0660_'+magg]) <= 3.0

    total_col = col1 & col2 & col3
    
    total_flags = flag1 & flag2  & flag3  & flag4 & flag5  & flag6  & flag7 & flag8  & flag9 & flag10 & flag11  & flag12
    total_mask_flags = mask_flag1 & mask_flag2 & mask_flag3 & mask_flag4 & mask_flag5 & mask_flag6 & mask_flag7 & mask_flag8 & mask_flag9 & mask_flag10 & mask_flag11 & mask_flag12
    #errors = ef1 & ef2 & ef3 & ef4 & ef5 & ef6 & ef7 & ef8 & ef9 & ef10 & ef11 & ef12
    errors = ef1 & ef6 & ef8 & ef10 & ef12
    
    #mask = f1 & f2 & f3 & f4 & f5 & f6 & f7 & f8 & total_flags & total_col & errors & total_mask_flags

    mask = f1 & f2 & f3 & f4 & f5 & f6 & f7 & f8 & f9 & f10 & f11 & f12 & total_col & total_flags 
    
    table = Table(tab[mask])
    return table
    
# pattern = "*.cat"
# file_list = glob.glob(pattern)

parser = argparse.ArgumentParser(
    description="""Make a table from the J-PLUS catalogs""")

parser.add_argument("source", type=str,
                    default="teste-program",
                    help="Name of catalog, taken the prefix ")

cmd_args = parser.parse_args()
fitsfile = cmd_args.source + ".tab"
tab = Table.read(fitsfile, format="ascii.tab")
  
#table_aper = select('aper', mag_aper)
#table_petro = select('petro', mag_petro)MAG_APER_6_0
table_Aper = select('MAG_APER_6_0')
table_auto = select('auto')

# # #Saving resultated table

######
#Aper#
######
asciifile_Aper = fitsfile.replace(".tab", "-cleaning-limfilter-limcolor-flags.tab")
#asciifile_auto = fitsfile.replace(".fits", ".tab")
try:
    table_Aper.write(asciifile_Aper, format='ascii.tab', overwrite=True)
except TypeError:
    table_Aper.write(asciifile_Aper, format='ascii.tab')
#+END_SRC

#+RESULTS:
file:aper6_mag_idr/Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab 
: 5599 objectos.

Tuve que volver a =.tab=, no funcionó con =.ecsv=.
Here is nor necessary apply the error criterion in r, F660 and i filter nether =r < 20= because this 
already is incorporated in the SQL query.

*** PCA 

I used the program =pca-jplusdr2_3class_predict.py= to classify, implementing directly in 
the table =Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab=

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab


   : PN=236, SySt=2098, 7 macth with HASH.

I ran again PCA with IAG machine, I found very different results I have to check that.

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-v1.tab

**** Cleaning:
 + With the program =JPLUS_cleaning_table.py=, we will clean the PCA results. It is apply the mask_flags and 
   error in all broad-band.

: python ../../varios-programas/JPLUS_cleaning_table.py PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags --debug

#+BEGIN_SRC python: cleaning the sample
   '''
   Read the table and clean after to implement PCA or LDA
   '''
   from __future__ import print_function
   import numpy as np
   from astropy.io import fits
   import os
   import glob
   import json
   import argparse
   import matplotlib.pyplot as plt
   import pandas as pd
   #import StringIO
   from astropy.table import Table

   def criterio_error(aper):
       ef1 = tab['uJAVA_'+aper+'_err'] <= 0.2
       ef2 = tab['J0378_'+aper+'_err'] <= 0.2
       ef3 =  tab['J0395_'+aper+'_err'] <= 0.2
       ef4 =  tab['J0410_'+aper+'_err'] <= 0.2
       ef5 =  tab['J0430_'+aper+'_err'] <= 0.2
       ef6 =  tab['gSDSS_'+aper+'_err'] <= 0.2
       ef7 =  tab['J0515_'+aper+'_err'] <= 0.2
       ef8 =  tab['rSDSS_'+aper+'_err'] <= 0.2
       ef9 =  tab['J0660_'+aper+'_err'] <= 0.2
       ef10 =  tab['iSDSS_'+aper+'_err'] <= 0.2
       ef11 =  tab['J0861_'+aper+'_err'] <= 0.2
       ef12 =  tab['zSDSS_'+aper+'_err'] <= 0.2

       errors = ef1 & ef6 & ef8 & ef10 & ef12
       return errors
    
    parser = argparse.ArgumentParser(
                  description="""Cleaning the samples""")

    parser.add_argument("source", type=str,
                        default="table-6mil-obj-jplus",
                        help="Name of table, taken the prefix ")

    parser.add_argument("--debug", action="store_true",
                        help="Print out verbose debugging info about each line in region file")

    args = parser.parse_args()
    file_ = args.source + ".tab"

    tab = Table.read(file_, format="ascii.tab")

    # MASK
    mask_flag1 = tab['rSDSS_MASK_FLAGS'] == 0.0
    mask_flag2 = tab['gSDSS_MASK_FLAGS'] == 0.0
    mask_flag3 = tab['iSDSS_MASK_FLAGS'] == 0.0 
    mask_flag4 = tab['zSDSS_MASK_FLAGS'] == 0.0
    mask_flag5 = tab['uJAVA_MASK_FLAGS'] == 0.0 
    mask_flag6 = tab['J0378_MASK_FLAGS'] == 0.0
    mask_flag7 = tab['J0395_MASK_FLAGS'] == 0.0
    mask_flag8 = tab['J0410_MASK_FLAGS'] == 0.0
    mask_flag9 = tab['J0430_MASK_FLAGS'] == 0.0
    mask_flag10 = tab['J0515_MASK_FLAGS'] == 0.0
    mask_flag11 = tab['J0660_MASK_FLAGS'] == 0.0
    mask_flag12 = tab['J0861_MASK_FLAGS'] == 0.0

    total_mask_flags = mask_flag1 & mask_flag2 & mask_flag3 & mask_flag4 & mask_flag5 & mask_flag6 & mask_flag7 & mask_flag8 & mask_flag9 & mask_flag10 & mask_flag11 & mask_flag12

    #Mask errorrs
    errors_mask = criterio_error("MAG_APER_6_0")

    # Total mask
    mask_total = total_mask_flags & errors_mask

    if args.debug:
        print("Cleaning table:", file_)
        print("Number of objects:", len(tab[mask_total]))

    # Save new tables
    asciifile_Aper = file_.replace(".tab", "-mask-broad.tab")
    try:
        tab[mask_total].write(asciifile_Aper, format='ascii.tab', overwrite=True)
    except TypeError:
        tab[mask_total].write(asciifile_Aper, format='ascii.tab')
#+END_SRC

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad.tab

1. mask and error broad filters: PN = 80 and SySt = 126 (it was a big reduction).
2. Writing the coordinate to make cross-matching with HASH. PN: only 5 matches. No matches SySt.
 
+ Cleaning again applying the error criterion all bands
  1. =PN = 57=
  2. 4 known PNe

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad-narrow.tab

+ Cleaning making a cut in the ~P(PNe) >= 0.75~.

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad-prob.tab

+ Cleaning applying the error a cut in the ~P(PNe) >= 0.75~.

#+RESULTS:
file:aper6_mag_idr/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad-narrow-prob.tab


**** JPLUS color criteria
 
  I putted the objects of the table =/PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad.tab=
  in my color-color diagrams. I got very nice results, they are located in the PN regions, however 
  many of these objects are located in the limit I mean around of the criteria lines.

  The program displays the color diagrams is
  : python ../../varios-programas/color-diagrams-jplusdr2_automatic.py PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad
  : The number of objects is: 80

  + I putted the known PNe in the color-color diagrams. The format of table after to do cross-matching
      is different, I have to do two programs more to convert the table in a adequate table =PN_HASH-JPLUS-DR2-v2.tab=
     : JPLUS_DR2_HaphaVii_table-v2.py
     : ipython/Convert table in table 
     - 64343-69243, NAME PN Ra 1 PN?, tiene los errores muy grandes
     - 70242-18193,  NGC 6543, todos los filtro angostos tienen FlAGS = 4.  
     - 65251-18195, PN Sp 4-1, MASK
     - 65750-23436,  NGC 6058, es catalogada como SySt. Pero la real PN es 65750-23821. Solo pega la foto-
       de la Wd.
     For these objects I created a individual file with then:
     : Missing-pne-allinf-v2.tab

     The J-spectra are in the folder: =Jspectra-missingPN=.
    
    And of course a new program to make the color diagrams
     : color-diagrams-jplusdr2_automatic-2tables.py

   + Making the color diagrams with the narrow error criteria
     : python ../../varios-programas/color-diagrams-jplusdr2_automatic-2tables.py PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad-narrow PN_HASH-JPLUS-DR2-v2

   + I finally made color diagrams for the different tables after to apply the criteria.

**** JPLUS spectra
  
  I made the JPLUS-spectra of these 80 objects.

  : python ../../new-programs/phospectra-candidates-jplusIDR2.py PN-pc-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags-mask-broad

#+BEGIN_SRC python: making the jplus spectra

'''
Make photo spectra from observed candidates JPLUS spectra
'''
from __future__ import print_function
import numpy as np
import glob
import json
import matplotlib.pyplot as plt
from astropy.table import Table
#import seaborn as sns
import sys
import argparse
import os
from colour import Color


wl = [3485, 3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
color = ["#CC00FF", "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
marker = ["s", "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] ### tienen todos los filtros

# wl1 = [ 3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
# color1 = [ "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
# marker1 = [ "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] # No tiene el primer filtro

#label_obj = ['PN candidate', "[HLG90] 55", "LEDA 101538", "PN Sp 4-1"]
label_pne = ['TK 1', "Kn J1857.7+3931", "KnPa J1848.6+4151", "Jacoby 1"]
label_obj = ['26063-6129', "LEDA 101538", "PN Sp 4-1", 'LEDA 2790884']

parser = argparse.ArgumentParser(
    description="""Write wave and magnitude of a spectrum""")

parser.add_argument("source", type=str,
                    default="known-PN-jplus-idr",
                    help="Name of source, taken the prefix ")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
file_ = args.source + ".tab"

data = Table.read(file_, format="ascii.tab")
n = data["RA"]

Number = []

mag_auto  = [[] for _ in range(len(n))]
mag_MAG_APER_6_0 = [[] for _ in range(len(n))]
mag_aper = [[] for _ in range(len(n))]
mag_auto_WORSTPSF = [[] for _ in range(len(n))]

#Error
mag_auto_err  = [[] for _ in range(len(n))]
mag_MAG_APER_6_0_err  = [[] for _ in range(len(n))]

print(len(n))

for i in range(len(n)):
    mag_auto[i].append(data["uJAVA_auto"][i])
    mag_auto[i].append(data["J0378_auto"][i])
    mag_auto[i].append(data["J0395_auto"][i])
    mag_auto[i].append(data["J0410_auto"][i])
    mag_auto[i].append(data["J0430_auto"][i])
    mag_auto[i].append(data["gSDSS_auto"][i])
    mag_auto[i].append(data["J0515_auto"][i]) 
    mag_auto[i].append(data["rSDSS_auto"][i]) 
    mag_auto[i].append(data["J0660_auto"][i])
    mag_auto[i].append(data["iSDSS_auto"][i]) 
    mag_auto[i].append(data["J0861_auto"][i]) 
    mag_auto[i].append(data["zSDSS_auto"][i])
    #Aper 6
    mag_MAG_APER_6_0[i].append(data["uJAVA_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["J0378_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["J0395_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["J0410_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["J0430_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["gSDSS_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["J0515_MAG_APER_6_0"][i]) 
    mag_MAG_APER_6_0[i].append(data["rSDSS_MAG_APER_6_0"][i]) 
    mag_MAG_APER_6_0[i].append(data["J0660_MAG_APER_6_0"][i])
    mag_MAG_APER_6_0[i].append(data["iSDSS_MAG_APER_6_0"][i]) 
    mag_MAG_APER_6_0[i].append(data["J0861_MAG_APER_6_0"][i]) 
    mag_MAG_APER_6_0[i].append(data["zSDSS_MAG_APER_6_0"][i])
   
    #ERRO AUTO
    mag_auto_err[i].append(float(data["uJAVA_auto_err"][i]))
    mag_auto_err[i].append(float(data["J0378_auto_err"][i]))
    mag_auto_err[i].append(float(data["J0395_auto_err"][i]))
    mag_auto_err[i].append(float(data["J0410_auto_err"][i]))
    mag_auto_err[i].append(float(data["J0430_auto_err"][i]))
    mag_auto_err[i].append(float(data["gSDSS_auto_err"][i]))
    mag_auto_err[i].append(float(data["J0515_auto_err"][i])) 
    mag_auto_err[i].append(float(data["rSDSS_auto_err"][i])) 
    mag_auto_err[i].append(float(data["J0660_auto_err"][i]))
    mag_auto_err[i].append(float(data["iSDSS_auto_err"][i]))
    try:
        mag_auto_err[i].append(float(data["J0861_auto_err"][i]))
    except ValueError:
        mag_auto_err[i].append(float(0.0))
    mag_auto_err[i].append(float(data["zSDSS_auto_err"][i]))

    #ERROR Aper 6
    mag_MAG_APER_6_0_err[i].append(data["uJAVA_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["J0378_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["J0395_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["J0410_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["J0430_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["gSDSS_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["J0515_MAG_APER_6_0_err"][i]) 
    mag_MAG_APER_6_0_err[i].append(data["rSDSS_MAG_APER_6_0_err"][i]) 
    mag_MAG_APER_6_0_err[i].append(data["J0660_MAG_APER_6_0_err"][i])
    mag_MAG_APER_6_0_err[i].append(data["iSDSS_MAG_APER_6_0_err"][i]) 
    mag_MAG_APER_6_0_err[i].append(data["J0861_MAG_APER_6_0_err"][i]) 
    mag_MAG_APER_6_0_err[i].append(data["zSDSS_MAG_APER_6_0_err"][i])
    
    font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 16,
        }

    #########################################
    # Aper 6                              ###
    #########################################
    plotfile = "photospectrum_"+str(data["Tile"][i])+"-"+str(data["Number"][i])+"{}_auto.pdf".format(file_.split('.ta')[0])
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(xmin=3000, xmax=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)
   
    # Mask to no take the values 99.0
    mask_au = [mag_auto[i][m] != 99.0 for m in range(len(mag_auto[0]))]

    ax.plot(np.array(wl)[mask_au], np.array(mag_auto[i])[mask_au], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(np.array(wl)[mask_au], np.array(mag_auto[i])[mask_au], mag_auto_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2, capsize=20)
    #plt.subplots_adjust(bottom=0.19)
    # plt.text(0.06, 0.86, label_obj[i],
    #     transform=ax.transAxes, fontsize=48,  fontdict=font)
    # plt.text(0.06, 0.85, label_obj[i],
    #      transform=ax.transAxes, fontsize=45,  fontdict=font)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../../../Dropbox/JPAS/paper-phot/'
    # save_path = '../../../../../Dropbox/paper-pne/Fig/'
    save_path = 'figs-pca/'
    file_save = os.path.join(save_path, plotfile)
    plt.savefig(file_save)
    plt.clf()

    #########################################
    # Auto                               ####
    #########################################
    plotfile = "photospectrum_"+str(data["Tile"][i])+"-"+str(data["Number"][i])+"{}_MAG_APER_6_0.pdf".format(file_.split('.ta')[0])
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(xmin=3000, xmax=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)

    #Mask to no take the values 99.0
    mask_ap = [mag_MAG_APER_6_0[i][m] != 99.0 for m in range(len(mag_MAG_APER_6_0[0]))]

    ax.plot(np.array(wl)[mask_ap], np.array(mag_MAG_APER_6_0[i])[mask_ap], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(np.array(wl)[mask_ap], np.array(mag_MAG_APER_6_0[i])[mask_ap], mag_MAG_APER_6_0_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2, capsize=20)
    #plt.subplots_adjust(bottom=0.19)
    # plt.text(0.06, 0.86, label_obj[i],
    #     transform=ax.transAxes, fontsize=48,  fontdict=font)
    # plt.text(0.06, 0.85, label_obj[i],
    #      transform=ax.transAxes, fontsize=45,  fontdict=font)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../../../Dropbox/JPAS/paper-phot/'
    #save_path = 'figs-pca/'
    file_save = os.path.join(save_path, plotfile)
    plt.savefig(file_save)
    plt.clf()

#+END_SRC
   
**** JPLUS images
  I started to make the RGB images:
  + Download the images>
    -Convert in FITS format.
    : for f in *.fz; do python ../../../varios-programas/convert-fz-fits.py ${f%.fz} ; done   
  + I modified the programs =catalog_utils_v2.py= to inclued the JPLUS ID and the radius petro as the 
    size of the region. I this modified that, when the radius petro is "0", it put 6 arcsec radi.
  + To write the REGIOn files we have to use:
    : Writting DS9 regions from JPLUS tables
  + After this do the tipical procedures cut and made the RGB images. New version of the program
    to cut =varios-programas/cut-images-fits-v2.py=
    : for f in *_swp.fits; for e in *.reg; do python ../../../varios-programas/cut-images-fits-v2.py ${f%_swp.fits} --position ${e%.reg} --debug; done

  + I have to continue download the images. The last one ~Field_6863~. Done.
  + To make the RGB images of a automatic way as in S-PLUS. I created executable file with
    : run-rgb-image-v2.py
    : run-rgb-image-j0660-v2.py
   
    convert in executable file:
    : chmod +x run-rgb-image-j0660jplus.run

    The executable files are:
    : ./run-rgb-image-rjplus.run
    : ./run-rgb-image-j0660jplus.run

    To run the RGB program to one source.
    : python ../../../varios-programas/rgb_image-v2.py 1000001-JPLUS-01066-v202006_J0861_63864-47481_swp-crop 1000001-JPLUS-01066-v202006_J0660_63864-47481_swp-crop 000001-JPLUS-01066-v202006_J0515_63864-47481_swp-crop --position 63864-47481_position --debug
 
**** Creating file latex
  + I created a program to the de latex file:
    : latex-images-jplus.py
  + The latex file is:
    : pne-jlusdr2.tex
  + I wrote a programs to only take the known PN.
    : latex-images-jplusknown.py
 
    
*** LDA 
I used the program default lda-jplusdr2_3class_predict.py, I used the file Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags.tab
    : PN=951, SySt=3047
   
** Cleaning:
 - With the program =JPLUS_cleaning_table.py=, we will to clean the PCA results: 
 
: python ../../varios-programas/JPLUS_cleaning_table.py PN-ld-Halpha_emitters_threeerror-cleaning-limfilter-limcolor-flags --debug

    1. mask and error broad filters: PN = 245 and SySt = 171 (it was a big reduction).
    2. Writing the coordinate to make cross-matching with HASH. PN: only 6 matches. No matches SySt.
** Comments
My favorite objects:
:  68634-15941
:  70455-1485
